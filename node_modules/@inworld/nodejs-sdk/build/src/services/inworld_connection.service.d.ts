import { InworldPacket as ProtoPacket } from '../../../proto/ai/inworld/packets/packets_pb';
import { CancelResponsesProps } from '../common/data_structures';
import { Character } from '../entities/character.entity';
import { InworldPacket, TriggerParameter } from '../entities/inworld_packet.entity';
import { ConnectionService } from './connection.service';
export declare class InworldConnectionService<InworldPacketT extends InworldPacket = InworldPacket> {
    private connection;
    constructor(connection: ConnectionService<InworldPacketT>);
    getSessionState(): Promise<import("./gprc/state_serialization_client_grpc.service").SessionState>;
    open(): Promise<void>;
    close(): void;
    isActive(): boolean;
    getCharacters(): Promise<Character[]>;
    getCurrentCharacter(): Promise<Character>;
    setCurrentCharacter(character: Character): void;
    sendText(text: string): Promise<InworldPacketT>;
    sendAudio(chunk: string): Promise<InworldPacketT>;
    sendTrigger(name: string, parameters?: TriggerParameter[]): Promise<InworldPacketT>;
    sendAudioSessionStart(): Promise<InworldPacketT>;
    sendAudioSessionEnd(): Promise<InworldPacketT>;
    sendCancelResponse(cancelResponses?: CancelResponsesProps): Promise<InworldPacketT>;
    sendTTSPlaybackMute(isMuted: boolean): Promise<InworldPacketT>;
    sendNarratedAction(text: string): Promise<InworldPacketT>;
    sendCustomPacket(getPacket: () => ProtoPacket): Promise<InworldPacketT>;
    baseProtoPacket(props?: {
        utteranceId?: boolean;
        interactionId?: boolean;
    }): ProtoPacket;
}
