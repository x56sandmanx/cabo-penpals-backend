import { ServiceError } from '@grpc/grpc-js';
import { AccessToken, CapabilitiesRequest, ClientRequest, LoadSceneResponse } from '../../../../proto/ai/inworld/engine/world-engine_pb';
import { InworldPacket as ProtoPacket } from '../../../../proto/ai/inworld/packets/packets_pb';
import { ApiKey, Awaitable, Extension, User } from '../../common/data_structures';
import { SessionContinuation } from '../../entities/continuation/session_continuation.entity';
import { SessionToken } from '../../entities/session_token.entity';
export interface LoadSceneProps<InworldPacketT> {
    name: string;
    client?: ClientRequest;
    user?: User;
    sessionToken: SessionToken;
    sessionContinuation?: SessionContinuation;
    capabilities: CapabilitiesRequest;
    extension?: Extension<InworldPacketT>;
}
export interface SessionProps {
    sessionToken: SessionToken;
    onDisconnect?: () => Awaitable<void>;
    onError?: (err: ServiceError) => Awaitable<void>;
    onMessage?: (message: ProtoPacket) => Awaitable<void>;
}
export declare class WorldEngineClientGrpcService<InworldPacketT> {
    private readonly config;
    private readonly address;
    private readonly ssl;
    private readonly grpcOptions;
    private readonly client;
    private logger;
    generateSessionToken(apiKey: ApiKey, scene: string): Promise<AccessToken>;
    loadScene(props: LoadSceneProps<InworldPacketT>): Promise<LoadSceneResponse>;
    session(props: SessionProps): import("@grpc/grpc-js").ClientDuplexStream<ProtoPacket, ProtoPacket>;
    private getMetadata;
    private getClient;
    private getUserSettings;
}
