"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InworldConnectionService = void 0;
const packets_pb_1 = require("../../../proto/ai/inworld/packets/packets_pb");
class InworldConnectionService {
    constructor(connection) {
        this.connection = connection;
    }
    getSessionState() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.getSessionState();
        });
    }
    open() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.openManually();
        });
    }
    close() {
        this.connection.close();
    }
    isActive() {
        return this.connection.isActive();
    }
    getCharacters() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.getCharactersList();
        });
    }
    getCurrentCharacter() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connection.getCharactersList();
            return this.connection.getEventFactory().getCurrentCharacter();
        });
    }
    setCurrentCharacter(character) {
        return this.connection.getEventFactory().setCurrentCharacter(character);
    }
    sendText(text) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => this.connection.getEventFactory().text(text));
        });
    }
    sendAudio(chunk) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => this.connection
                .getEventFactory()
                .dataChunk(chunk, packets_pb_1.DataChunk.DataType.AUDIO));
        });
    }
    sendTrigger(name, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => this.connection.getEventFactory().trigger(name, parameters));
        });
    }
    sendAudioSessionStart() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => this.connection.getEventFactory().audioSessionStart());
        });
    }
    sendAudioSessionEnd() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => this.connection.getEventFactory().audioSessionEnd());
        });
    }
    sendCancelResponse(cancelResponses) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => this.connection.getEventFactory().cancelResponse(cancelResponses));
        });
    }
    sendTTSPlaybackMute(isMuted) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => this.connection.getEventFactory().mutePlayback(isMuted));
        });
    }
    sendNarratedAction(text) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => this.connection.getEventFactory().narratedAction(text));
        });
    }
    sendCustomPacket(getPacket) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => getPacket());
        });
    }
    baseProtoPacket(props) {
        return this.connection.getEventFactory().baseProtoPacket(props);
    }
}
exports.InworldConnectionService = InworldConnectionService;
