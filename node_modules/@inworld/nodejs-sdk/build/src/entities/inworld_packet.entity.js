"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InworldPacket = exports.InworlControlType = exports.InworldPacketType = void 0;
const packets_pb_1 = require("../../../proto/ai/inworld/packets/packets_pb");
const emotion_behavior_entity_1 = require("./emotion_behavior.entity");
const emotion_strength_entity_1 = require("./emotion_strength.entity");
var InworldPacketType;
(function (InworldPacketType) {
    InworldPacketType["UNKNOWN"] = "UNKNOWN";
    InworldPacketType["TEXT"] = "TEXT";
    InworldPacketType["AUDIO"] = "AUDIO";
    InworldPacketType["TRIGGER"] = "TRIGGER";
    InworldPacketType["EMOTION"] = "EMOTION";
    InworldPacketType["CONTROL"] = "CONTROL";
    InworldPacketType["SILENCE"] = "SILENCE";
    InworldPacketType["CANCEL_RESPONSE"] = "CANCEL_RESPONSE";
    InworldPacketType["NARRATED_ACTION"] = "NARRATED_ACTION";
})(InworldPacketType = exports.InworldPacketType || (exports.InworldPacketType = {}));
var InworlControlType;
(function (InworlControlType) {
    InworlControlType["UNKNOWN"] = "UNKNOWN";
    InworlControlType["INTERACTION_END"] = "INTERACTION_END";
    InworlControlType["TTS_PLAYBACK_MUTE"] = "TTS_PLAYBACK_MUTE";
    InworlControlType["TTS_PLAYBACK_UNMUTE"] = "TTS_PLAYBACK_UNMUTE";
})(InworlControlType = exports.InworlControlType || (exports.InworlControlType = {}));
class InworldPacket {
    constructor(props) {
        this.type = InworldPacketType.UNKNOWN;
        this.packetId = props.packetId;
        this.routing = props.routing;
        this.date = props.date;
        this.type = props.type;
        if (this.isText()) {
            this.text = props.text;
        }
        if (this.isAudio()) {
            this.audio = props.audio;
        }
        if (this.isControl()) {
            this.control = props.control;
        }
        if (this.isEmotion()) {
            this.emotions = props.emotions;
        }
        if (this.isTrigger()) {
            this.trigger = props.trigger;
        }
        if (this.isSilence()) {
            this.silence = props.silence;
        }
        if (this.isCancelResponse()) {
            this.cancelResponses = props.cancelResponses;
        }
        if (this.isNarratedAction()) {
            this.narratedAction = props.narratedAction;
        }
    }
    isText() {
        return this.type === InworldPacketType.TEXT;
    }
    isAudio() {
        return this.type === InworldPacketType.AUDIO;
    }
    isControl() {
        return this.type === InworldPacketType.CONTROL;
    }
    isTrigger() {
        return this.type === InworldPacketType.TRIGGER;
    }
    isEmotion() {
        return this.type === InworldPacketType.EMOTION;
    }
    isInteractionEnd() {
        return (this.isControl() &&
            this.control.type === InworlControlType.INTERACTION_END);
    }
    isTTSPlaybackMute() {
        return (this.isControl() &&
            this.control.type === InworlControlType.TTS_PLAYBACK_MUTE);
    }
    isTTSPlaybackUnmute() {
        return (this.isControl() &&
            this.control.type === InworlControlType.TTS_PLAYBACK_UNMUTE);
    }
    isSilence() {
        return this.type === InworldPacketType.SILENCE;
    }
    isCancelResponse() {
        return this.type === InworldPacketType.CANCEL_RESPONSE;
    }
    isNarratedAction() {
        return this.type === InworldPacketType.NARRATED_ACTION;
    }
    static fromProto(proto) {
        var _a, _b;
        const packetId = proto.getPacketId();
        const routing = proto.getRouting();
        const source = routing.getSource();
        const target = routing.getTarget();
        const type = this.getType(proto);
        const textEvent = proto.getText();
        const emotionEvent = proto.getEmotion();
        const additionalPhonemeInfo = (_b = (_a = proto.getDataChunk()) === null || _a === void 0 ? void 0 : _a.getAdditionalPhonemeInfoList()) !== null && _b !== void 0 ? _b : [];
        return new InworldPacket(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ type, date: proto.getTimestamp().toDate().toISOString(), packetId: {
                packetId: packetId.getPacketId(),
                utteranceId: packetId.getUtteranceId(),
                interactionId: packetId.getInteractionId(),
                correlationId: packetId.getCorrelationId(),
            }, routing: {
                source: {
                    name: source.getName(),
                    isPlayer: source.getType() === packets_pb_1.Actor.Type.PLAYER,
                    isCharacter: source.getType() === packets_pb_1.Actor.Type.AGENT,
                },
                target: {
                    name: target.getName(),
                    isPlayer: target.getType() === packets_pb_1.Actor.Type.PLAYER,
                    isCharacter: target.getType() === packets_pb_1.Actor.Type.AGENT,
                },
            } }, (type === InworldPacketType.TRIGGER && {
            trigger: {
                name: proto.getCustom().getName(),
                parameters: proto
                    .getCustom()
                    .getParametersList()
                    .map((p) => ({
                    name: p.getName(),
                    value: p.getValue(),
                })),
            },
        })), (type === InworldPacketType.TEXT && {
            text: {
                text: textEvent.getText(),
                final: textEvent.getFinal(),
            },
        })), (type === InworldPacketType.AUDIO && {
            audio: {
                chunk: proto.getDataChunk().getChunk_asB64(),
                additionalPhonemeInfo: additionalPhonemeInfo.map((info) => ({
                    phoneme: info.getPhoneme(),
                    startOffsetS: this.durationToSeconds(info.getStartOffset()),
                })),
            },
        })), (type === InworldPacketType.CONTROL && {
            control: {
                type: this.getControlType(proto),
            },
        })), (type === InworldPacketType.SILENCE && {
            silence: {
                durationMs: proto.getDataChunk().getDurationMs(),
            },
        })), (type === InworldPacketType.EMOTION && {
            emotions: {
                behavior: new emotion_behavior_entity_1.EmotionBehavior(emotion_behavior_entity_1.EmotionBehavior.fromProto(emotionEvent.getBehavior())),
                strength: new emotion_strength_entity_1.EmotionStrength(emotion_strength_entity_1.EmotionStrength.fromProto(emotionEvent.getStrength())),
            },
        })), (type === InworldPacketType.CANCEL_RESPONSE && {
            cancelResponses: {
                interactionId: proto
                    .getMutation()
                    .getCancelResponses()
                    .getInteractionId(),
                utteranceId: proto
                    .getMutation()
                    .getCancelResponses()
                    .getUtteranceIdList(),
            },
        })), (type === InworldPacketType.NARRATED_ACTION && {
            narratedAction: {
                text: proto.getAction().getNarratedAction().getContent(),
            },
        })));
    }
    static getType(packet) {
        var _a, _b;
        switch (true) {
            case packet.hasText():
                return InworldPacketType.TEXT;
            case packet.hasDataChunk() &&
                packet.getDataChunk().getType() === packets_pb_1.DataChunk.DataType.AUDIO:
                return InworldPacketType.AUDIO;
            case packet.hasDataChunk() &&
                packet.getDataChunk().getType() === packets_pb_1.DataChunk.DataType.SILENCE:
                return InworldPacketType.SILENCE;
            case packet.hasCustom():
                return InworldPacketType.TRIGGER;
            case packet.hasControl():
                return InworldPacketType.CONTROL;
            case packet.hasEmotion():
                return InworldPacketType.EMOTION;
            case (_a = packet.getMutation()) === null || _a === void 0 ? void 0 : _a.hasCancelResponses():
                return InworldPacketType.CANCEL_RESPONSE;
            case (_b = packet.getAction()) === null || _b === void 0 ? void 0 : _b.hasNarratedAction():
                return InworldPacketType.NARRATED_ACTION;
            default:
                return InworldPacketType.UNKNOWN;
        }
    }
    static getControlType(packet) {
        switch (packet.getControl().getAction()) {
            case packets_pb_1.ControlEvent.Action.INTERACTION_END:
                return InworlControlType.INTERACTION_END;
            case packets_pb_1.ControlEvent.Action.TTS_PLAYBACK_MUTE:
                return InworlControlType.TTS_PLAYBACK_MUTE;
            case packets_pb_1.ControlEvent.Action.TTS_PLAYBACK_UNMUTE:
                return InworlControlType.TTS_PLAYBACK_UNMUTE;
            default:
                return InworlControlType.UNKNOWN;
        }
    }
    static durationToSeconds(duration) {
        return duration.getSeconds() + duration.getNanos() / 1000000000;
    }
}
exports.InworldPacket = InworldPacket;
