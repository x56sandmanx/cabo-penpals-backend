import { DataChunk, InworldPacket as ProtoPacket } from '../../../proto/ai/inworld/packets/packets_pb';
import { CancelResponsesProps } from '../common/data_structures';
import { Character } from '../entities/character.entity';
import { TriggerParameter } from '../entities/inworld_packet.entity';
export declare class EventFactory {
    private character;
    getCurrentCharacter(): Character;
    setCurrentCharacter(character: Character): void;
    dataChunk(chunk: string, type: DataChunk.DataType): ProtoPacket;
    audioSessionStart(): ProtoPacket;
    audioSessionEnd(): ProtoPacket;
    mutePlayback(isMuted: boolean): ProtoPacket;
    text(text: string): ProtoPacket;
    trigger(name: string, parameters?: TriggerParameter[]): ProtoPacket;
    cancelResponse(cancelResponses?: CancelResponsesProps): ProtoPacket;
    narratedAction(content: string): ProtoPacket;
    baseProtoPacket(props?: {
        utteranceId?: boolean;
        interactionId?: boolean;
        correlationId?: boolean;
    }): ProtoPacket;
    private routing;
}
