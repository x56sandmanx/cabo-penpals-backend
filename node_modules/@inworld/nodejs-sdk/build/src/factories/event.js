"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventFactory = void 0;
const packets_pb_1 = require("../../../proto/ai/inworld/packets/packets_pb");
const uuid_1 = require("uuid");
const helpers_1 = require("../common/helpers");
class EventFactory {
    constructor() {
        this.character = null;
    }
    getCurrentCharacter() {
        return this.character;
    }
    setCurrentCharacter(character) {
        this.character = character;
    }
    dataChunk(chunk, type) {
        const event = new packets_pb_1.DataChunk().setType(type).setChunk(chunk);
        return this.baseProtoPacket({
            utteranceId: false,
            interactionId: false,
        }).setDataChunk(event);
    }
    audioSessionStart() {
        const event = new packets_pb_1.ControlEvent().setAction(packets_pb_1.ControlEvent.Action.AUDIO_SESSION_START);
        return this.baseProtoPacket({
            utteranceId: false,
            interactionId: false,
        }).setControl(event);
    }
    audioSessionEnd() {
        const event = new packets_pb_1.ControlEvent().setAction(packets_pb_1.ControlEvent.Action.AUDIO_SESSION_END);
        return this.baseProtoPacket({
            utteranceId: false,
            interactionId: false,
        }).setControl(event);
    }
    mutePlayback(isMuted) {
        const event = new packets_pb_1.ControlEvent().setAction(isMuted
            ? packets_pb_1.ControlEvent.Action.TTS_PLAYBACK_MUTE
            : packets_pb_1.ControlEvent.Action.TTS_PLAYBACK_UNMUTE);
        return this.baseProtoPacket({
            utteranceId: false,
            interactionId: false,
        }).setControl(event);
    }
    text(text) {
        const event = new packets_pb_1.TextEvent()
            .setText(text)
            .setSourceType(packets_pb_1.TextEvent.SourceType.TYPED_IN)
            .setFinal(true);
        return this.baseProtoPacket({ correlationId: true }).setText(event);
    }
    trigger(name, parameters = []) {
        const event = new packets_pb_1.CustomEvent().setName(name);
        if (parameters.length) {
            event.setParametersList(parameters.map((p) => new packets_pb_1.CustomEvent.Parameter().setName(p.name).setValue(p.value)));
        }
        return this.baseProtoPacket({ correlationId: true }).setCustom(event);
    }
    cancelResponse(cancelResponses) {
        const event = new packets_pb_1.CancelResponsesEvent();
        if (cancelResponses === null || cancelResponses === void 0 ? void 0 : cancelResponses.interactionId) {
            event.setInteractionId(cancelResponses.interactionId);
        }
        if (cancelResponses === null || cancelResponses === void 0 ? void 0 : cancelResponses.utteranceId) {
            event.setUtteranceIdList(cancelResponses.utteranceId);
        }
        return this.baseProtoPacket({
            utteranceId: false,
            interactionId: false,
            correlationId: true,
        }).setMutation(new packets_pb_1.MutationEvent().setCancelResponses(event));
    }
    narratedAction(content) {
        const event = new packets_pb_1.ActionEvent().setNarratedAction(new packets_pb_1.NarratedAction().setContent(content));
        return this.baseProtoPacket({ correlationId: true }).setAction(event);
    }
    baseProtoPacket(props) {
        const packetId = new packets_pb_1.PacketId().setPacketId((0, uuid_1.v4)());
        if ((props === null || props === void 0 ? void 0 : props.utteranceId) !== false) {
            packetId.setUtteranceId((0, uuid_1.v4)());
        }
        if ((props === null || props === void 0 ? void 0 : props.interactionId) !== false) {
            packetId.setInteractionId((0, uuid_1.v4)());
        }
        if (props === null || props === void 0 ? void 0 : props.correlationId) {
            packetId.setCorrelationId((0, uuid_1.v4)());
        }
        return new packets_pb_1.InworldPacket()
            .setPacketId(packetId)
            .setRouting(this.routing())
            .setTimestamp((0, helpers_1.protoTimestamp)());
    }
    routing() {
        var _a;
        const source = new packets_pb_1.Actor().setType(packets_pb_1.Actor.Type.PLAYER);
        const target = new packets_pb_1.Actor()
            .setType(packets_pb_1.Actor.Type.AGENT)
            .setName((_a = this.character) === null || _a === void 0 ? void 0 : _a.id);
        return new packets_pb_1.Routing().setSource(source).setTarget(target);
    }
}
exports.EventFactory = EventFactory;
